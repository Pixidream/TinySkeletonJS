export default class Skeleton extends window.HTMLElement{constructor(){super(),this.root=this.attachShadow({mode:"open"})}createSize(n,t){return n?(n.match(/^[0-9]+$/)&&(n+="px"),n):t?"100%":"auto"}connectedCallback(){const n=this.hasAttribute("circle"),t=this.getAttribute("placeholder")||"\\00a0",e=this.createSize(this.getAttribute("width"),"\\00a0"===t);let a=this.createSize(this.getAttribute("height"));n&&(a=e);const r=this.getAttribute("borderRadius"),s=this.hasAttribute("rounded"),i=parseInt(this.getAttribute("lines")||0,10);let o="<span></span>";if(i>1)for(let n=1;n<i;n++)o+="<span></span>";this.root.innerHTML=`\n      <style>\n        :host {\n          display: block;\n        }\n        div {\n          display: flex;\n          flex-direction: column;\n          align-items: flex-start;\n        }\n        span {\n          position: relative;\n          width: ${e};\n          height: ${a};\n          display: block;\n          background-color: var(--skeleton, #0000001c);\n          border-radius: ${null===r?s?"10px":n?"50%":"0px":r};\n          overflow: hidden;\n          transform: ${"\\00a0"!==t||i>0?"scale(1, .6)":"none"};\n        }\n        span::before {\n          content: '${t}';\n          opacity: 0;\n        }\n        span::after {\n          content: '';\n          position: absolute;\n          top: 0;\n          left: 0;\n          bottom: 0;\n          right: 0;\n          animation: waves 1.6s linear .5s infinite;\n          transform: translateX(-100%);\n          background: linear-gradient(90deg, transparent, var(--skeleton-wave, rgba(0,0,0,0.04)), transparent);\n        }\n        @keyframes waves {\n          0% {\n            transform: translateX(-100%);\n          }\n          60% {\n            transform: translateX(100%);\n          }\n          100% {\n            transform: translate(100%);\n          }\n        }\n      </style>\n      <div>\n        ${o}\n      </div>\n    `}}
